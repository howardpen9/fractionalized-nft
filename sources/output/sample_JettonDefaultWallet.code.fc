#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_JettonDefaultWallet.headers.fc";
#include "sample_JettonDefaultWallet.stdlib.fc";
#include "sample_JettonDefaultWallet.storage.fc";

;;
;; Contract JettonDefaultWallet functions
;;

(int, slice, slice, int) $JettonDefaultWallet$_contract_init(slice $master, slice $owner) impure inline_ref {
    var (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint)) = (null(), null(), null(), 1000000000000);
    $self'balance = 0;
    $self'owner = $owner;
    $self'master = $master;
    return ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint);
}

((int, slice, slice, int), int) $JettonDefaultWallet$_fun_msgValue((int, slice, slice, int) $self, int $value) impure inline_ref {
    var (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint)) = $self;
    int $msgValue = $value;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (50000000 - min($tonBalanceBeforeMsg, 50000000));
    $msgValue = ($msgValue - ($storageFee + 50000000));
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), $msgValue);
}

((int, slice, slice, int), (int, slice, slice, cell)) $JettonDefaultWallet$_fun_get_wallet_data((int, slice, slice, int) $self) impure inline_ref {
    var (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint)) = $self;
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), $WalletData$_constructor_balance_owner_master_code($self'balance, $self'owner, $self'master, $StateInit$_get_code($JettonDefaultWallet$_init_child(__tact_context_sys, $self'master, $self'owner))));
}

;;
;; Receivers of a Contract JettonDefaultWallet
;;

(((int, slice, slice, int)), ()) %$JettonDefaultWallet$_internal_empty((int, slice, slice, int) $self) impure inline {
    var ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint) = $self;
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), ());
}

(((int, slice, slice, int)), ()) $JettonDefaultWallet$_internal_binary_TokenTransfer((int, slice, slice, int) $self, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint) = $self;
    var ($msg'queryId, $msg'amount, $msg'destination, $msg'response_destination, $msg'customPayload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    $self'balance = ($self'balance - $msg'amount);
    throw_unless(62972, ($self'balance >= 0));
    int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw));
    int $fwdCount = 1;
    if (($msg'forward_ton_amount > 0)) {
        $fwdCount = 2;
    }
    throw_unless(16059, ($ctx'value > ((($fwdCount * $fwdFee) + (2 * 50000000)) + 50000000)));
    var ($init'code, $init'data) = $JettonDefaultWallet$_init_child(__tact_context_sys, $self'master, $msg'destination);
    slice $newOwner_walletAddress = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($newOwner_walletAddress, 0, (64 + 2), true, $TokenTransferInternal$_store_cell($TokenTransferInternal$_constructor_queryId_amount_from_response_destination_forward_ton_amount_forward_payload($msg'queryId, $msg'amount, $self'owner, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload)), $init'code, $init'data));
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), ());
}

(((int, slice, slice, int)), ()) $JettonDefaultWallet$_internal_binary_TokenTransferInternal((int, slice, slice, int) $self, (int, int, slice, slice, int, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (( ~ __tact_slice_eq_bits($self'master, $ctx'sender) )) {
        var ($sinit'code, $sinit'data) = $JettonDefaultWallet$_init_child(__tact_context_sys, $self'master, $msg'from);
        throw_unless(4429, ( __tact_slice_eq_bits($ctx'sender, $global_contractAddress(($sinit'code, $sinit'data))) ));
    }
    $self'balance = ($self'balance + $msg'amount);
    throw_unless(62972, ($self'balance >= 0));
    if (($msg'forward_ton_amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'owner, $msg'forward_ton_amount, 1, false, $TokenNotification$_store_cell($TokenNotification$_constructor_queryId_amount_from_forward_payload($msg'queryId, $msg'amount, $msg'from, $msg'forward_payload))));
    }
    int $msgValue = ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint)~$JettonDefaultWallet$_fun_msgValue($ctx'value);
    int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw));
    $msgValue = (($msgValue - $msg'forward_ton_amount) - $fwdFee);
    if (( ((~ null?($msg'response_destination))) ? (($msgValue > 0)) : (false) )) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'response_destination, $msgValue, 2, false, $TokenExcesses$_store_cell($TokenExcesses$_constructor_queryId($msg'queryId))));
    }
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), ());
}

((int, slice, slice, int), ()) $JettonDefaultWallet$_internal_text_041fc8435e986414de5ec504f636c56d274d3f94285802d72324f24e45e32dd9((int, slice, slice, int) $self) impure inline {
    var ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(50669, ($ctx'value >= 300000000));
    $self'balance = ($self'balance - $self'jettoken_token_uint);
    throw_unless(62972, ($self'balance >= 0));
    int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw));
    throw_unless(16059, ($ctx'value > (($fwdFee + (2 * 50000000)) + 50000000)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'master, 250000000, (2 + 1), true, $TokenBurnNotification$_store_cell($TokenBurnNotification$_constructor_queryId_amount_owner_responseAddress(0, $self'jettoken_token_uint, $self'owner, my_address()))));
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), ());
}

((int, slice, slice, int), ()) $JettonDefaultWallet$_receive_bounce((int, slice, slice, int) $self, slice $msg) impure inline {
    var ($self'balance, $self'owner, $self'master, $self'jettoken_token_uint) = $self;
    $msg~skip_bits(32);
    int $op = $msg~load_uint(32);
    int $queryId = $msg~load_uint(64);
    int $jettonAmount = $msg~load_coins();
    throw_unless(13650, ( (($op == 395134233)) ? (true) : (($op == 2078119902)) ));
    $self'balance = ($self'balance + $jettonAmount);
    return (($self'balance, $self'owner, $self'master, $self'jettoken_token_uint), ());
}

;;
;; Get methods of a Contract JettonDefaultWallet
;;

_ %msgValue(int $$value) method_id(115218) {
    int $value = $$value;
    var self = $JettonDefaultWallet$_contract_load();
    var res = self~$JettonDefaultWallet$_fun_msgValue($value);
    return res;
}

_ %get_wallet_data() method_id(97026) {
    var self = $JettonDefaultWallet$_contract_load();
    var res = self~$JettonDefaultWallet$_fun_get_wallet_data();
    return $WalletData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNUx4ZyTYf7GUy6kL6ZStdd8Pa1toexFF7tPzBYbfn9w7";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract JettonDefaultWallet
;;

((int, slice, slice, int), int) $JettonDefaultWallet$_contract_router_internal((int, slice, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Fallback bounce receiver
        self~$JettonDefaultWallet$_receive_bounce(in_msg);
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$JettonDefaultWallet$_internal_empty();
        return (self, true);
    }
    
    ;; Receive TokenTransfer message
    if (op == 260734629) {
        var msg = in_msg~$TokenTransfer$_load();
        self~$JettonDefaultWallet$_internal_binary_TokenTransfer(msg);
        return (self, true);
    }
    
    ;; Receive TokenTransferInternal message
    if (op == 395134233) {
        var msg = in_msg~$TokenTransferInternal$_load();
        self~$JettonDefaultWallet$_internal_binary_TokenTransferInternal(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Redeem" message
        if (text_op == 0x041fc8435e986414de5ec504f636c56d274d3f94285802d72324f24e45e32dd9) {
            self~$JettonDefaultWallet$_internal_text_041fc8435e986414de5ec504f636c56d274d3f94285802d72324f24e45e32dd9();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $JettonDefaultWallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$JettonDefaultWallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $JettonDefaultWallet$_contract_store(self);
}
