;;
;; Header files for Jetton_Root
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $TokenTransferInternal$_store
builder $TokenTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $TokenTransferInternal$_store_cell
cell $TokenTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $TokenExcesses$_store
builder $TokenExcesses$_store(builder build_0, (int) v) inline;

;; $TokenExcesses$_store_cell
cell $TokenExcesses$_store_cell((int) v) inline;

;; $UploadContent$_load
(slice, ((cell))) $UploadContent$_load(slice sc_0) inline;

;; $TokenMinting$_load
(slice, ((slice, slice))) $TokenMinting$_load(slice sc_0) inline;

;; $TokenBurnNotification$_load
(slice, ((int, int, slice, slice))) $TokenBurnNotification$_load(slice sc_0) inline;

;; $Defractionalize$_store
builder $Defractionalize$_store(builder build_0, (slice) v) inline;

;; $Defractionalize$_store_cell
cell $Defractionalize$_store_cell((slice) v) inline;

;; $Jetton_Root$_store
builder $Jetton_Root$_store(builder build_0, (int, int, slice, slice, cell, int) v) inline;

;; $Jetton_Root$_load
(slice, ((int, int, slice, slice, cell, int))) $Jetton_Root$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $MasterData$_to_external
(int, int, slice, cell, cell) $MasterData$_to_external(((int, int, slice, cell, cell)) v) inline;

;; $Jetton_Root$init$_load
(slice, ((slice, slice))) $Jetton_Root$init$_load(slice sc_0) inline;

;; $JettonDefaultWallet$init$_store
builder $JettonDefaultWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $Jetton_Root$_contract_init
(int, int, slice, slice, cell, int) $Jetton_Root$_contract_init(slice $admin, slice $collection_address) impure inline_ref;

;; $Jetton_Root$_contract_load
(int, int, slice, slice, cell, int) $Jetton_Root$_contract_load() impure inline_ref;

;; $Jetton_Root$_contract_store
() $Jetton_Root$_contract_store((int, int, slice, slice, cell, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $TokenTransferInternal$_constructor_queryId_amount_from_response_destination_forward_ton_amount_forward_payload
((int, int, slice, slice, int, slice)) $TokenTransferInternal$_constructor_queryId_amount_from_response_destination_forward_ton_amount_forward_payload(int queryId, int amount, slice from, slice response_destination, int forward_ton_amount, slice forward_payload) inline;

;; $JettonDefaultWallet$_init_child
(cell, cell) $JettonDefaultWallet$_init_child(cell sys', slice $master, slice $owner) inline_ref;

;; $Jetton_Root$_fun_getJettonWalletInit
((int, int, slice, slice, cell, int), (cell, cell)) $Jetton_Root$_fun_getJettonWalletInit((int, int, slice, slice, cell, int) $self, slice $address) impure inline_ref;

;; $Jetton_Root$_fun_mint_jetton
((int, int, slice, slice, cell, int), ()) $Jetton_Root$_fun_mint_jetton((int, int, slice, slice, cell, int) $self, slice $to, int $amount, slice $responseAddress) impure inline_ref;

;; $Jetton_Root$_fun_msgValue
((int, int, slice, slice, cell, int), int) $Jetton_Root$_fun_msgValue((int, int, slice, slice, cell, int) $self, int $value) impure inline_ref;

;; $SendParameters$_constructor_to_mode_value_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_mode_value_bounce_body(slice to, int mode, int value, int bounce, cell body) inline;

;; $TokenExcesses$_constructor_queryId
((int)) $TokenExcesses$_constructor_queryId(int queryId) inline;

;; $Jetton_Root$_fun_get_wallet_address
((int, int, slice, slice, cell, int), slice) $Jetton_Root$_fun_get_wallet_address((int, int, slice, slice, cell, int) $self, slice $owner) impure inline_ref;

;; $Jetton_Root$_fun_burn
((int, int, slice, slice, cell, int), ()) $Jetton_Root$_fun_burn((int, int, slice, slice, cell, int) $self, int $burnAmount, int $queryId, slice $previous_ownerAddress) impure inline_ref;

;; $MasterData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code
((int, int, slice, cell, cell)) $MasterData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code(int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) inline;

;; $Jetton_Root$_fun_get_jetton_data
((int, int, slice, slice, cell, int), (int, int, slice, cell, cell)) $Jetton_Root$_fun_get_jetton_data((int, int, slice, slice, cell, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Jetton_Root$_fun_forward
((int, int, slice, slice, cell, int), ()) $Jetton_Root$_fun_forward((int, int, slice, slice, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $Defractionalize$_constructor_sender
((slice)) $Defractionalize$_constructor_sender(slice sender) inline;
