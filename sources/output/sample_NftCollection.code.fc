#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_NftCollection.headers.fc";
#include "sample_NftCollection.stdlib.fc";
#include "sample_NftCollection.constants.fc";
#include "sample_NftCollection.storage.fc";

;;
;; Contract NftCollection functions
;;

(int, slice, (int, int, slice), cell, cell, int, int) $NftCollection$_contract_init(slice $admin, cell $collection_content, (int, int, slice) $royalty_params) impure inline_ref {
    var (($royalty_params'numerator, $royalty_params'denominator, $royalty_params'destination)) = $royalty_params;
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = (0, null(), null(), null(), null(), 0, 0);
    $self'admin = $admin;
    $self'collection_content = $collection_content;
    ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination) = ($royalty_params'numerator, $royalty_params'denominator, $royalty_params'destination);
    return ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index);
}

((int, slice, (int, int, slice), cell, cell, int, int), (cell, cell)) $NftCollection$_fun_getNftItemInit((int, slice, (int, int, slice), cell, cell, int, int) $self, int $item_index) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), $NftItem$_init_child(__tact_context_sys, my_address(), $item_index, $self'admin, $self'collection_content));
}

((int, slice, (int, int, slice), cell, cell, int, int), ()) $NftCollection$_fun_mint((int, slice, (int, int, slice), cell, cell, int, int) $self, slice $sender, int $msgValue) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    throw_unless(62742, ($self'next_item_index >= 0));
    var ($nft_init'code, $nft_init'data) = ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_getNftItemInit($self'next_item_index);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body_code_data($global_contractAddress(($nft_init'code, $nft_init'data)), $msgValue, false, 2, $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, $sender, $self'admin, $global_emptyCell(), 0, $global_emptySlice())), $nft_init'code, $nft_init'data));
    $self'next_item_index = ($self'next_item_index + 1);
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

((int, slice, (int, int, slice), cell, cell, int, int), int) $NftCollection$_fun_restTransactionValue((int, slice, (int, int, slice), cell, cell, int, int) $self, int $msgValue) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (50000000 - min($tonBalanceBeforeMsg, 50000000));
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ($msgValue - ($storageFee + 50000000)));
}

((int, slice, (int, int, slice), cell, cell, int, int), slice) $NftCollection$_fun_getTokenAddress((int, slice, (int, int, slice), cell, cell, int, int) $self) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    var ($winit'code, $winit'data) = $Jetton_Root$_init_child(__tact_context_sys, $self'admin, my_address());
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), $global_contractAddress(($winit'code, $winit'data)));
}

((int, slice, (int, int, slice), cell, cell, int, int), (int, cell, slice)) $NftCollection$_fun_get_collection_data((int, slice, (int, int, slice), cell, cell, int, int) $self) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    tuple $b = __tact_string_builder_start_string();
    slice $collectionDataString = __tact_slice_to_str($Cell$_fun_asSlice($self'collection_content));
    $b~__tact_string_builder_append($collectionDataString);
    $b~__tact_string_builder_append(__gen_slice_string_7ca4179185a84c879806ec30a1f5fa692451a7fb8dfcf32a967a2cb475822481());
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), $CollectionData$_constructor_next_item_index_collection_content_admin($self'next_item_index, __tact_string_builder_end($b), $self'admin));
}

((int, slice, (int, int, slice), cell, cell, int, int), slice) $NftCollection$_fun_get_nft_address_by_index((int, slice, (int, int, slice), cell, cell, int, int) $self, int $item_index) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    var ($initCode'code, $initCode'data) = ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_getNftItemInit($item_index);
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), $global_contractAddress(($initCode'code, $initCode'data)));
}

((int, slice, (int, int, slice), cell, cell, int, int), cell) $NftCollection$_fun_get_nft_content((int, slice, (int, int, slice), cell, cell, int, int) $self, int $index, cell $individual_content) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    tuple $b = __tact_string_builder_start_string();
    slice $ic = __tact_slice_to_str($Cell$_fun_asSlice($individual_content));
    $b~__tact_string_builder_append($ic);
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), __tact_string_builder_end($b));
}

((int, slice, (int, int, slice), cell, cell, int, int), (int, int, slice)) $NftCollection$_fun_royalty_params((int, slice, (int, int, slice), cell, cell, int, int) $self) impure inline_ref {
    var (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)) = $self;
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination));
}

;;
;; Receivers of a Contract NftCollection
;;

((int, slice, (int, int, slice), cell, cell, int, int), ()) $NftCollection$_internal_text_247c7bd5f39e2258d80ac36a0419a1ab5779757825a6cc0e915368f00610a18a((int, slice, (int, int, slice), cell, cell, int, int) $self) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_mint($ctx'sender, ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_restTransactionValue($ctx'value));
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

(((int, slice, (int, int, slice), cell, cell, int, int)), ()) $NftCollection$_internal_binary_Fractionalize((int, slice, (int, int, slice), cell, cell, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    var ($msg'item_index, $msg'original_applicant) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(22185, ( __tact_slice_eq_bits_nullable_one(($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_get_nft_address_by_index($msg'item_index), $ctx'sender) ));
    $self'fractionalized_nft~__tact_dict_set_int_int(257, $msg'item_index, $self'fractional_index, 257);
    $self'fractional_index = ($self'fractional_index + 1);
    var ($token_init'code, $token_init'data) = $Jetton_Root$_init_child(__tact_context_sys, $self'admin, my_address());
    ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_forward($global_contractAddress(($token_init'code, $token_init'data)), $TokenMinting$_store_cell($TokenMinting$_constructor_collection_address_original_applicant(my_address(), $msg'original_applicant)), false, $StateInit$_as_optional(($token_init'code, $token_init'data)));
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

(((int, slice, (int, int, slice), cell, cell, int, int)), ()) $NftCollection$_internal_binary_Defractionalize((int, slice, (int, int, slice), cell, cell, int, int) $self, (slice) $msg) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    var ($msg'sender) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(38283, ( __tact_slice_eq_bits(($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_getTokenAddress(), $ctx'sender) ));
    int $redeem_nft_id = __tact_not_null(__tact_dict_get_int_int($self'fractionalized_nft, 257, $self'redeem_index, 257));
    $self'fractionalized_nft~__tact_dict_set_int_int(257, $self'redeem_index, null(), 257);
    $self'redeem_index = ($self'redeem_index + 1);
    ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_forward(__tact_not_null(($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index)~$NftCollection$_fun_get_nft_address_by_index($redeem_nft_id)), $RedeemNftItem$_store_cell($RedeemNftItem$_constructor_new_owner($msg'sender)), false, null());
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

(((int, slice, (int, int, slice), cell, cell, int, int)), ()) %$NftCollection$_internal_empty((int, slice, (int, int, slice), cell, cell, int, int) $self) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

((int, slice, (int, int, slice), cell, cell, int, int), ()) $NftCollection$_internal_any_text((int, slice, (int, int, slice), cell, cell, int, int) $self, slice $str) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

((int, slice, (int, int, slice), cell, cell, int, int), ()) $NftCollection$_internal_any((int, slice, (int, int, slice), cell, cell, int, int) $self, slice $slice) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

(((int, slice, (int, int, slice), cell, cell, int, int)), ()) $NftCollection$_internal_binary_GetRoyaltyParams((int, slice, (int, int, slice), cell, cell, int, int) $self, (int) $msg) impure inline {
    var ($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index) = $self;
    var ($msg'query_id) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, 64, false, $ReportRoyaltyParams$_store_cell($ReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination($msg'query_id, $self'royalty_params'numerator, $self'royalty_params'denominator, $self'admin))));
    return (($self'next_item_index, $self'admin, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content, $self'fractionalized_nft, $self'fractional_index, $self'redeem_index), ());
}

;;
;; Get methods of a Contract NftCollection
;;

_ %getTokenAddress() method_id(87426) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_getTokenAddress();
    return res;
}

_ %get_collection_data() method_id(102491) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_collection_data();
    return $CollectionData$_to_external(res);
}

_ %get_nft_address_by_index(int $$item_index) method_id(92067) {
    int $item_index = $$item_index;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_nft_address_by_index($item_index);
    return res;
}

_ %getNftItemInit(int $$item_index) method_id(81078) {
    int $item_index = $$item_index;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_getNftItemInit($item_index);
    return $StateInit$_to_external(res);
}

_ %get_nft_content(int $$index, cell $$individual_content) method_id(68445) {
    int $index = $$index;
    cell $individual_content = $$individual_content;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_nft_content($index, $individual_content);
    return res;
}

_ %royalty_params() method_id(85719) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_royalty_params();
    return $RoyaltyParams$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmapE26bCVMkVZFfbXZeaq3kdUBLahk4WQo5F3uorqzdGY";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract NftCollection
;;

((int, slice, (int, int, slice), cell, cell, int, int), int) $NftCollection$_contract_router_internal((int, slice, (int, int, slice), cell, cell, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Fractionalize message
    if (op == 4066592985) {
        var msg = in_msg~$Fractionalize$_load();
        self~$NftCollection$_internal_binary_Fractionalize(msg);
        return (self, true);
    }
    
    ;; Receive Defractionalize message
    if (op == 3221538545) {
        var msg = in_msg~$Defractionalize$_load();
        self~$NftCollection$_internal_binary_Defractionalize(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$NftCollection$_internal_empty();
        return (self, true);
    }
    
    ;; Receive GetRoyaltyParams message
    if (op == 1765620048) {
        var msg = in_msg~$GetRoyaltyParams$_load();
        self~$NftCollection$_internal_binary_GetRoyaltyParams(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Mint" message
        if (text_op == 0x247c7bd5f39e2258d80ac36a0419a1ab5779757825a6cc0e915368f00610a18a) {
            self~$NftCollection$_internal_text_247c7bd5f39e2258d80ac36a0419a1ab5779757825a6cc0e915368f00610a18a();
            return (self, true);
        }
        if (slice_bits(in_msg) >= 32) {
            self~$NftCollection$_internal_any_text(in_msg.skip_bits(32));
            return (self, true);
        }
    }
    
    ;; Receiver fallback
    self~$NftCollection$_internal_any(in_msg);
    return (self, true);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $NftCollection$_contract_load();
    
    ;; Handle operation
    int handled = self~$NftCollection$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $NftCollection$_contract_store(self);
}
